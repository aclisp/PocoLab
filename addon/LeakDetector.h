//
// LeakDetector.h
//
// $Id: //poco/Main/Foundation/include/Poco/LeakDetector.h#7 $
//
// Library: Foundation
// Package: Core
// Module:  LeakDetector
//
// Definition of the LeakDetector class.
//
// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef Foundation_LeakDetector_INCLUDED
#define Foundation_LeakDetector_INCLUDED


#include "Poco/Foundation.h"
#include "Poco/Exception.h"


#if defined(POCO_OS_FAMILY_WINDOWS)
#include "Poco/LeakDetector_WIN32.h"
#else
#include "Poco/LeakDetector_OTHER.h"
#endif


namespace Poco {


class Foundation_API LeakDetector: private LeakDetectorImpl
	/// This class implements a platform-independent
	/// wrapper to a leak detecion API.
	/// The class is used to detect memory leaks between
	/// two checkpoints. The checkpoints can be set an arbitrary number
	/// of times. Leak detection, when invoked, only reports those leaks
	/// that occurred between two last checkPoint() calls.
{
public:	

	LeakDetector();
		/// Creates a leak detector.
		
	~LeakDetector();
		/// Destroys the thread.

	void checkPoint();
		/// Sets a checkpoint.
		/// In order to detect memory leaks, it must be called at least twice.

	bool hasLeaks();
		/// Returns true if leaks were found between the last two 
		/// subsequent checkpoints.

	void reset();
		/// Resets the detector.
	
	void dump();
		/// Dumps the memory information.

private:
	LeakDetector(const LeakDetector&);
};


//
// inlines
//
inline void LeakDetector::checkPoint()
{
	checkPointImpl();
}


inline bool LeakDetector::hasLeaks()
{
	return hasLeaksImpl();
}


inline void LeakDetector::reset()
{
	resetImpl();
}


inline void LeakDetector::dump()
{
	dumpImpl();
}


} // namespace Poco


#endif // Foundation_LeakDetector_INCLUDED
