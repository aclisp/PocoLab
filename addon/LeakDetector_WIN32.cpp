//
// LeakDetector_WIN32.h
//
// $Id: //poco/Main/Foundation/src/LeakDetector_WIN32.cpp#17 $
//
// Library: Foundation
// Package: Core
// Module:  LeakDetector
//
// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "Poco/LeakDetector_WIN32.h"


namespace Poco {


LeakDetectorImpl::LeakDetectorImpl():_cpIndex(0), _hasLeaks(false)
{
	_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);
	_CrtSetReportMode(_CRT_ERROR, _CRTDBG_MODE_DEBUG);
}

			
LeakDetectorImpl::~LeakDetectorImpl()
{
}


void LeakDetectorImpl::checkPointImpl()
{
	if (0 == _cpIndex) resetImpl();

	_CrtMemCheckpoint(&_state[_cpIndex]);
	if (1 == _cpIndex++)
	{
		_hasLeaks = (0 != _CrtMemDifference(&_state[2], &_state[0], &_state[1]));
		_cpIndex = 0;
	}
}


void LeakDetectorImpl::resetImpl()
{
	_cpIndex = 0;
	_hasLeaks = false;
	std::memset(_state, 0, sizeof(_CrtMemState) * CHECK_POINT_COUNT);
}


} // namespace Poco
